.. _installation:

***************************************
2. Установка и настройка сервера Smarty
***************************************

.. _download-software:

2.1. Где скачать установочные пакеты
====================================

Инсталляционные пакеты ПО распространяются через FTP, доступ к которому предоставляется на время действия договора.

.. _install-on-debian:

2.2. Установка на ОС Linux Debian
=================================

Все модули Smarty поставляются в виде установочных deb-пакетов и устанавливаются утилитой dpkg.
Обязательным модулем является ``smarty-base``.

Для работы необходим web-сервер ``nginx``, ``uwsgi`` и ``python 2.7``, а также несколько других пакетов.

.. _install-requirements:

2.2.1. Установка зависимостей
-----------------------------

Установка через ``apt-get``: ::

    sudo apt-get install nginx git python-dev python2.7 libmysqlclient-dev libtiff5-dev libjpeg62-turbo-dev zlib1g-dev
    libfreetype6-dev liblcms2-dev libwebp-dev tcl8.5-dev tk8.5-dev python-tk uwsgi uwsgi-plugin-python redis-server

Установка утилиты ``pip``: ::

    wget https://bootstrap.pypa.io/get-pip.py && python get-pip.py && rm get-pip.py

.. _install-smarty-and-modules:

2.2.2. Установка Smarty и модулей
---------------------------------

Установка через ``dpkg``: ::

    dpkg -i smarty*.deb
    dpkg -i python2.7-jsonrpctcp*.deb

После установки пакетов Smarty необходимо установить python-библиотеки через ``pip``: ::

    sudo pip install -r /usr/share/nginx/html/microimpuls/smarty/requirements.txt

После установки пакета smarty-base создается конфигурационный файл для nginx в ``/etc/nginx/sites-available/smarty``.
По умолчанию настроен на домен ``smarty.example.com`` и слушает порт ``80`` и ``8180``.
Необходимо перенастроить данный домен на необходимый.

Файлы Smarty размещаются в ``/usr/share/nginx/html/microimpuls/smarty``.

.. _migrate-database-scheme:

2.2.3. Установка схемы базы данных
----------------------------------

Первичная установка схемы базы данных осуществляется командой: ::

    smarty_manage migrate --settings=settings.<settings filename>

- *<settings filename>* - имя файла настроек Smarty, в котором должны быть установлены параметры подключения к БД
  (см. :ref:`Описание основных параметров <settings-description>`).

.. note::

    Дополнительные материалы:

    - :ref:`Особенности установки и настройки подключения Smarty к СУБД Oracle <cx_oracle>`

.. _create-superuser:

2.2.4. Создание пользователя администратора
-------------------------------------------

Создание пользователя с правами служебного администратора осуществляется командой: ::

    smarty_manage createsuperuser --settings=settings.<settings filename>

- *<settings filename>* - имя файла настроек Smarty, в котором должны быть установлены параметры подключения к БД
  (см. :ref:`Описание основных параметров <settings-description>`).


.. _setup-initial-data:

2.2.5. Создание системных объектов в базе данных и примера настроек оператора
-----------------------------------------------------------------------------

Для создания системных объектов Smarty в базе данных, а также примера настроек выполните команду: ::

    smarty_manage setup_initial_data --settings=settings.<settings filename>

- *<settings filename>* - имя файла настроек Smarty, в котором должны быть установлены параметры подключения к БД
  (см. :ref:`Описание основных параметров <settings-description>`).

.. note::

    Можно пропустить создание образца настроек оператора, добавив флаг ``--no-sample-data``


.. _clone-client:

2.2.6. Клонирование Client со всеми настройками оператора
---------------------------------------------------------

В случае необходимости создания нового объекта Client и копирования всех данных можно использовать команду клонирования: ::

    smarty_manage clone_client --src_client_id=<source client id> --settings=settings.<settings filename>

- *<source client id>* - ID объекта Client, который нужно склонировать в новый Client.
- *<settings filename>* - имя файла настроек Smarty, в котором должны быть установлены параметры подключения к БД
  (см. :ref:`Описание основных параметров <settings-description>`).

.. note::

    Можно перенести также все телеканалы, фильмы, радиостанции, камеры и сервисы, используя соответствующие опции
    ``--clone-channels`` ``--clone-video`` ``--clone-radio`` ``--clone-cameras`` ``--clone-apps``

2.2.7. Создание пользователя или восстановление пароля
------------------------------------------------------

В Smarty возможно создание или восстановление пользователя через команду `create_user`: ::

    smarty_manage create_user --settings=settings.<settings filename> --username=new_user --password=new_password --is_admin=True --client_id=1 --is_superuser=True

Параметры:

- `--username` - имя пользователя, обязательный.
- `--password` - пароль, обязательный.
- `--is_admin` - `True` или `False`, если `True`, то создаваемому пользователю будет доступна служебная часть сайта, по умолчанию `False`.
- `--client_id` - ID клиента, к которому будет привязан создаваемы пользователь.
- `--is_superuser` - `True` или `False`, если `True`, то будет создаен суперпользователь, по умолчанию `False`.
- `--monitoring_user` - `True` или `False`, если `True`, то пользователь будет являться оператором мониторинга устройств, по умолчанию `False`.
- `--reset_password` - если `True`, то в случае, если указанный username уже используется, то вместо создания нового будет изменён пароль у старого пользователя; по умолчанию `False`.

2.2.8. Создание Client
----------------------

В Smarty возможно создание оператора (Client) через команду `create_client`: ::

    smarty_manage create_client --settings=settings.<settings filename> --name=Client_name --api_key=api_key --domain_prefix=domain_prefix --email=email@example.com

Параметры:

- `--name` - название оператора, обязательный.
- `--api_key` - TVMW API Key, обязательный.
- `--domain_prefix` - префикс домена оператора, обязательный.
- `--email` - email оператора, обязательный.

.. _install-on-centos:

2.3. Установка на ОС Linux CentOS
=================================

Поддержка CentOS является экспериментальной - корректная работа всех функций Smarty не гарантируется.
Скрипт установки для fabric и примеры конфигурации на CentOS можно найти здесь: https://github.com/microimpuls/smarty-centos

.. _system-configuration:

2.4. Конфигурация Smarty
========================

.. _smarty-config:

2.4.1. Файл настроек Smarty
---------------------------

После первичной установки базовый файл конфигурации Smarty находится по адресу ``/etc/microimpuls/smarty/base.py``
(симлинк на ``/usr/share/nginx/html/microimpuls/smarty/settings/base.py``).

Основной файл конфигурации, используемый для production-режима работы - ``/etc/microimpuls/smarty/prod.py``.
На этот файл (или на другой используемый конфиг) должен указывать симлинк в ``/usr/share/nginx/html/microimpuls/smarty/settings/<setings name>.py``.
Именно в нем следует производить настройку Smarty, т.к. базовый файл конфигурации может быть перезаписан после установки обновлений.

Конфигурация производится путем присваивания значений переменным на Python.

.. _smarty-multiinstance:

2.4.1.1. Обслуживание нескольких инстансов Smarty на одном сервере
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для удобства конфигурации и размещения на одном сервере нескольких инстансов Smarty рекомендуется вместо использования
файла настроек ``prod.py`` создать собственный файл с кратким символическим именем, совпадающим с названием сервиса,
например ``myiptv.py``.

Данное имя затем также рекомендуется использование как суффикс или префикс в именах файлов конфигурации *nginx*, *uwsgi*,
именах папок для логов, pid-файлов и др.

.. _settings-description:

2.4.2. Описание параметров конфигурации Smarty
----------------------------------------------

Файл конфигурации задается на языке Python.

DEBUG ``bool``
  Включить режим отладки. При возникновении ошибок будут показаны развернутые stacktrace ошибки в браузере.

DATABASES ``dict``
  В этом массиве настраивается подключение к СУБД. При использовании нескольких СУБД для репликации необходимо отдельно
  настроить подключение к каждой из них, задав для каждого подключения уникальное имя.

TIME_ZONE ``str``
  Часовой пояс сервера согласно именованию IANA.

SECRET_KEY ``str``
  Уникальный секретный ключ инстанса. Используется для безопасного кеширования секретных данных в процессе работы.
  Не забудьте поменять параметр SECRET_KEY на уникальное значение.

INSTALLED_APPS ``list``
  Список установленных модулей. Список дополняет базовые модули, прописанные в ``base.py``, через операцию ``+=``.

EMAIL_HOST ``str``
  Адрес smtp-сервера.

EMAIL_PORT ``int``
  Порт smtp-сервера.

EMAIL_HOST_USER ``str``
  Имя пользователя для авторизации на smtp-сервере.

EMAIL_HOST_PASSWORD ``str``
  Пароль для авторизации на smtp-сервере.

EMAIL_USE_TLS ``bool``
  Включает использование защищенного протокола TLS при отправке писем.

DEFAULT_FROM_EMAIL ``str``
  Отображаемый адрес "От" в отправляемых служебных email по умолчанию.

SMARTY_URL ``str``
  URL к инстансу Smarty. Используется в панели администратора.
  По умолчанию "http://smarty.example.com".

MEDIA_ROOT ``str``
  Путь к директории, в которой размещаются статические файлы (css, картинки, js).
  По умолчанию - подпапка media

MEDIA_BASE_URL ``str``
  URL, который используется в ответах API в качестве базового пути к изображениям и статическим ресурсам,
  например для иконок телеканалов, картинок EPG или обложек фильмов.

UPLOAD_URL ``str``
  URL папки для загруженного пользователями контента.
  
MAIN_MENU ``dict``
  Описывает структуру главного меню админки смарти. Поля:
  {"role":[{'name': '', 'title': '', 'icon': '', 
            'subitems': [{'name': '', 'title': '', 'url': ''}, ...]
        }, ...]}, где role - вид клиента (client, dealer, copyright_holder, etc)

TVMIDDLEWARE_PORTAL_DOMAIN ``str``
  Домен, на котором располагается портал для устройств типа STB и Smart TV. Используется только для вспомогательных
  информационных целей и не влияет на работу приложения.

TVMIDDLEWARE_API_URL ``str``
  URL к интерфейсу TVMiddleware API для использования в абонентских приложениях.
  По умолчанию "http://smarty.example.com/tvmiddleware/api". Для мультидоменной инсталляции можно использовать
  относительное значение "/api".

TVMIDDLEWARE_PROGRAM_LIST_SEARCH_DAYS_PAST ``int``
  Глубина поиска EPG в прошлое в днях. Используется при запросах на поиск контента. При использовании большого значения
  поиск будет осуществляться дольше и задействовать больше ресурсов сервера БД и Middleware.
  По умолчанию 1.

TVMIDDLEWARE_PROGRAM_LIST_SEARCH_DAYS_FUTURE ``int``
  Глубина поиска EPG в будущее в днях. Используется при запросах на поиск контента. При использовании большого значения
  поиск будет осуществляться дольше и задействовать больше ресурсов сервера БД и Middleware.
  По умолчанию 1.

TVMIDDLEWARE_PROGRAM_LIST_SEARCH_LIMIT_RESULTS_TO ``int``
  Максимальное количество результатов, которое будет возвращено сервером на запрос поиска передач (метод ProgramListSearch).
  По умолчанию 20.

TVMIDDLEWARE_VIDEO_NEW_DAYS ``int``
  Период в днях с даты добавления фильма, в течение которого добавленный фильм считается новинкой и отображается
  в соответствующем разделе в приложениях абонента.
  По умолчанию 60.

TVMIDDLEWARE_VIDEO_PREMIERE_DAYS ``int``
  Период в днях с даты премьеры фильма, в течение которого фильм считается премьерой и отображается
  в соответствующем разделе в приложениях абонента.
  По умолчанию 90.

TVMIDDLEWARE_CONTENT_POSITION_TTL_DAYS_VIDEO ``int``
  Период в днях, в течение которого необходимо хранить на сервере сохраненные позиции просмотра видео для
  возможности предложить абоненту продолжить просмотр с прошлой позиции. По умолчанию 30.

TVMIDDLEWARE_CONTENT_POSITION_TTL_DAYS_PROGRAM ``int``
  Период в днях, в течение которого необходимо хранить на сервере сохраненные позиции просмотра программы для
  возможности предложить абоненту продолжить просмотр с прошлой позиции. По умолчанию 30.

TVMIDDLEWARE_RECOMMENDATIONS_ENABLED ``bool``
  Включить категорию "Рекомендуемые" в разделе "ТВ по интересам". По умолчанию False.

TVMIDDLEWARE_WEATHER_WIDGET_OPENWEATHERMAP_CITY ``str``
  Название города на английском языке (например, Moscow), для которого будет показан прогноз погоды по умолчанию
  в соответствующем виджете в приложениях абонента. Город должен существовать в сервисе OpenWeatherMap.

TVMIDDLEWARE_WEATHER_WIDGET_OPENWEATHERMAP_APPID ``int``
  App ID в сервисе OpenWeatherMap, используется в обращениях к API сервиса при запросе прогноза погоды.

TVMIDDLEWARE_WEATHER_WIDGET_CACHE_TIMEOUT ``int``
  Время в секундах, на которое необходимо кешировать результат запроса прогноза погоды. Используется, чтобы
  уменьшить количество запросов. По умолчанию 900.

TVMIDDLEWARE_EXCHANGE_WIDGET_CACHE_TIMEOUT ``int``
  Время в секундах, на которое необходимо кешировать результат запроса курсов валют. Используется, чтобы
  уменьшить количество запросов. По умолчанию 7200.

TVMIDDLEWARE_EXCHANGE_WIDGET_FIRST_CURRENCY ``str``
  Первая валюта для виджета курсов валют в портале. (см. http://www.cbr.ru/scripts/Root.asp?PrtId=SXML)
  По умолчанию ``USD``.

TVMIDDLEWARE_EXCHANGE_WIDGET_SECOND_CURRENCY ``str``
  Вторая валюта для виджета курсов валют в портале. (см. http://www.cbr.ru/scripts/Root.asp?PrtId=SXML)
  По умолчанию ``EUR``.

TVMIDDLEWARE_EXCHANGE_WIDGET_COUNTRY_CODE ``str``
  Код страны. В зависимости от этого будет выбран источник данных для курсов валют.
  Возможные значения:
  ``RU`` (http://www.cbr.ru/scripts/XML_daily.asp),
  ``KG`` (http://www.nbkr.kg/XML/daily.xml),
  ``EE`` (https://www.eestipank.ee/en/exchange-rates/export/xml/latest).
  По умолчанию ``RU``.

TVMIDDLEWARE_RSS_WIDGET_CACHE_TIMEOUT ``int``
  Время в секундах, на которое необходимо кешировать результат запроса RSS-ленты. Используется, чтобы
  уменьшить количество запросов. По умолчанию 900.

TVMIDDLEWARE_STREAM_SERVICE_TOKEN_TTL ``int``
  Время жизни одноразового токена для авторизации стриминг-сервисов (при использовании Smarty как токен-сервера) в
  секундах. По прошествии данного времени для токена запускается механизм продления, если это возможно. По умолчанию 3600 (60   минут).
  
TVMIDDLEWARE_STREAM_SERVICE_TOKEN_MAX_TTL ``int``
  Максимальное время жизни токена (при использовании Smarty как токен-сервера) в секундах, по достижении которого продление     не осуществляется. По умолчанию 10800 (180 минут).
  
TVMIDDLEWARE_STREAM_SERVICE_TOKEN_PROLONGATION_THRESHOLD_TTL ``int``
  Пороговое значение оставшегося времени жизни токена в секундах, после которого осуществляется продление. По умолчанию 360     (6 минут).
  
TVMIDDLEWARE_STREAM_SERVICE_AUTH_DURATION ``int``
  Временной интервал, по истечении которого происходит перепроверка токена во Flussonic. 
  Указывается в секундах. 
  По умолчанию 3 минуты (180 секунд).

TVMIDDLEWARE_DISABLE_PAGINATION ``bool``
  Отключает подсчёт количества объектов при пагинации в некоторых списках в админке.

TVMW_DONT_USE_ENDLESS_WRT ``bool``
   При True отключается добавление флага endless=1 для приставок WRT в ссылках на видеопотоки.

TVMIDDLEWARE_CLEAN_OLD_SESSIONS_DAYS ``int``
  Время жизни сессии авторизации в днях. Если сессия не была в статусе "онлайн" в течение этого периода, то она будет
  автоматически удалена.
  По умолчанию 3650.

TVMIDDLEWARE_MULTILOGIN_ENABLED ``bool``
  Включает или отключает механизм мультилогинов (аккаунт с неограниченными возможностями авторизации) в Smarty.
  По умолчанию True.

TVMIDDLEWARE_CHANNEL_AUTOSORT ``list``
  Позволяет отключить функцию автосортировки каналов в Smarty, если задать значение ``[]``.

TVMIDDLEWARE_ADS_ENABLED ``bool``
  При значении True будет в методах ChannelUrl и ProgramUrl будет возвращаться параметр ``ads``.
  Необходимо для работоспособности функционала рекламных блоков и роликов в шаблонах, которые это
  поддерживают. Может приводить к снижению производительности Smarty при большом количестве пользователей
  на один сервер.
  По умолчанию False.

TVMIDDLEWARE_VIDEO_EXTERNAL_API_REQUIRED ``bool``
  При значении True поля "Внешний ID" и "Обработчик API" в форме создания фильма будут обязательными.
  По умолчанию False.

TVMIDDLEWARE_CUSTOMER_LOG_ENABLED ``bool``
  Включает логирование активности абонентов в БД.
  По умолчанию False.

TVMIDDLEWARE_VIDEO_ACTORS_EXTENDED_UPDATE ``bool``
  При загрузке фильмов из стороннего источника будет производиться автоматическая подгрузка дополнительной информации об актёрах.
  По умолчанию True.

TVMW_CLIENT_LOGO_MAX_HEIGHT ``int``
  Максимальная высота логотипа оператора. Загруженный логотип будет сжат до этого размера.
  По умолчанию 240.

TVMW_CLIENT_LOGO_MAX_WIDTH ``int``
  Максимальная ширина логотипа оператора. Загруженный логотип будет сжат до этого размера.
  По умолчанию 320.

TVMW_CLIENT_PLAY_DEVICE_LOGO_MAX_HEIGHT ``int``
  Максимальная высота основного логотипа в абонентском приложении. Загруженный логотип будет сжат до этого размера.
  По умолчанию 240.

TVMW_CLIENT_PLAY_DEVICE_LOGO_MAX_WIDTH ``int``
  Максимальная ширина основного логотипа в абонентском приложении. Загруженный логотип будет сжат до этого размера.
  По умолчанию 320.

TVMW_CLIENT_PLAY_DEVICE_LOGO_LOGIN_MAX_HEIGHT ``int``
  Максимальная высота логотипа для экрана авторизации в абонентском приложении. Загруженный логотип будет сжат до этого размера.
  По умолчанию 240.

TVMW_CLIENT_PLAY_DEVICE_LOGO_LOGIN_MAX_WIDTH ``int``
  Максимальная ширина логотипа для экрана авторизации в абонентском приложении. Загруженный логотип будет сжат до этого размера.
  По умолчанию 320.

TVMW_CLIENT_PLAY_DEVICE_LOGO_LOADING_MAX_HEIGHT ``int``
  Максимальная высота логотипа для экрана загрузки в абонентском приложении. Загруженный логотип будет сжат до этого размера.
  По умолчанию 240.

TVMW_CLIENT_PLAY_DEVICE_LOGO_LOADING_MAX_WIDTH ``int``
  Максимальная ширина логотипа для экрана авторизации в абонентском приложении. Загруженный логотип будет сжат до этого размера.
  По умолчанию 320.

TVMW_VIDEO_POSTER_BIG_MAX_HEIGHT ``int``
  Максимальная высота обложки фильма VOD. Загруженная обложка будет сжата до этого размера.
  По умолчанию 800.

TVMW_VIDEO_POSTER_BIG_MAX_WIDTH ``int``
  Максимальная ширина обложки фильма VOD. Загруженная обложка будет сжата до этого размера.
  По умолчанию 800.

TVMW_VIDEO_POSTER_SMALL_MAX_HEIGHT ``int``
  Максимальная высота обложки для предпросмотра фильма VOD. Загруженная обложка будет сжата до этого размера.
  По умолчанию 300.

TVMW_VIDEO_POSTER_SMALL_MAX_WIDTH ``int``
  Максимальная ширина обложки для предпросмотра фильма VOD. Загруженная обложка будет сжата до этого размера.
  По умолчанию 300.

TVMW_VIDEO_FILE_PROMO_IMAGE_MAX_HEIGHT ``int``
  Максимальная высота промо-картинки видео-ассета в VOD. Загруженная картинка будет сжата до этого размера.
  По умолчанию 720.

TVMW_VIDEO_FILE_PROMO_IMAGE_MAX_WIDTH ``int``
  Максимальная ширина промо-картинки видео-ассета в VOD. Загруженная картинка будет сжата до этого размера.
  По умолчанию 1280.
  
TVMW_VIDEO_SCREENSHOT_BIG_MAX_HEIGHT ``int``
  Максимальная высота промо-картинки видео-ассета в VOD. Загруженная картинка будет сжата до этого размера.
  По умолчанию 720.  

TVMW_VIDEO_SCREENSHOT_BIG_MAX_WIDTH ``int``
  Максимальная ширина промо-картинки видео-ассета в VOD. Загруженная картинка будет сжата до этого размера.
  По умолчанию 1280.
  
TVMW_VIDEO_SCREENSHOT_BLUR_RADIUS ``int``
  Радиус размытия, применяемый к скриншотам видео-ассета при загрузке.
  По умолчанию 4

TVMW_EXAPP_ICON_MAX_HEIGHT ``int``
  Максимальная высота иконки стороннего приложения. Загруженная картинка будет сжата до этого размера.
  По умолчанию 600.

TVMW_EXAPP_ICON_MAX_WIDTH ``int``
  Максимальная ширина иконки стороннего приложения. Загруженная картинка будет сжата до этого размера.
  По умолчанию 900.

TVMW_ACTOR_PHOTO_MAX_HEIGHT ``int``
  Максимальная высота фотографии актера в VOD. Загруженная картинка будет сжата до этого размера.
  По умолчанию 800.

TVMW_ACTOR_PHOTO_MAX_WIDTH ``int``
  Максимальная ширина фотографии актера в VOD. Загруженная картинка будет сжата до этого размера.
  По умолчанию 800.

TVMW_CONSIDER_PROGRAM_CATEGORY ``bool``
  Если значение False, то в выдаче API-метода ProgramCategoryChannelList ("ТВ по интересам") категория текущей передачи
  не учитывается, и список каналов формируется только исходя из категории EpgChannel.
  По умолчанию True.

TVMW_PREVENT_CASCADE_DELETION ``bool``
  При значении True запрещает удаление объектов в Smarty через панель администратора при наличии у объектов дочерних связанных объектов.
  При значении False удаление таких объектов разрешено, но дочерние объекты при этом удалены не будут.
  По умолчанию False.

TVMW_ENABLE_LINK_TO_CUSTOMER_ON_ACCOUNTS_PAGE ``bool``
  При значении True на странице списка аккаунтов в панели администратора в колонке "Абонент" будет отображаться ссылка на редактирование абонента.
  Иначе просто имя абонента.
  По умолчанию False.
  
TVMW_DISABLE_MULTICAST_SMARTTV = ``bool``
  При True будут скрыты каналы с мультикаст-адресами для SmartTV.
  По умолчанию True.
  
TVMW_DISABLE_MULTICAST_MOBILE = ``bool``
  При True будут скрыты каналы с мультикаст-адресами для мобильных устройств.
  По умолчанию True.

TVMIDDLEWARE_MOVIEDB ``str``
  Выбор базы с фильмами, которая используется для заполнения информации о добавляемых фильмах.
  Доступные значения: ``kinopoisk`` и ``cinemate``.
  По умолчанию ``kinopoisk``.

TVMIDDLEWARE_CINEMATE_KEY ``str``
  API ключ для работы с базой ``cinemate``.

TVMIDDLEWARE_CACHE_EXISTING_ICONS ``bool``
  Включить кэширование данных о размерах существующих иконок. Необходимо для отправки иконок корректных размеров для устройств.
  По умнолчанию False.

TVMIDDLEWARE_VODPVR_TIMEOUT_OFFSET ``int``
  Определяет за какое времени до удаления архивной записи они должны пропасть из выдачи для клиентов в часах.
  По умнолчанию 2 часа.

DEALERS_DISPLAY_MANUAL_ACCOUNT_ACTIVATION_DATE ``bool``
  Включить/выключить возможность ручного ввода даты активации и деактивации в личном кабинете дилера.
  По умолчанию False.  
  
TVMW_EPG_DO_NOT_IMPORT_UNUSED ``bool``
  Опция позволяет отключить импорт неиспользуемых EPG-каналов.
  По умолчанию False.
  
TVMW_EPG_SAVE_MULTIPLE_CATEGORIES ``bool``
  Определяет, сохранять ли все переданные категории при импорте epg. При значении False будет сохранена только первая найденная категория. Опция присутствует для обеспечения обратной совместимости.
  По умолчанию True
  
WEATHER_DEFAULT_BACKEND ``str``
  Бэкенд источника информации о погоде, используемый по умолчанию
  
WEATHER_GISMETEO_TOKEN ``str``
  Токен для сервиса гисметео

WEATHER_FOBOS_USER ``str``
  Имя пользователя для сервиса погоды "Фобос"

WEATHER_FOBOS_PASS ``str``
  Пароль пользователя для сервиса погоды "Фобос"

LOG_FILE_OWNER_USER ``str``
  Имя пользователя-владельца лог-файлов
  
LOG_FILE_OWNER_GROUP ``str``
  Имя группы пользователя-владельца лог-файлов
  
LOGGING ``dict``
  Конфигурация логов смарти. Формат: ::

    LOGGING = {
        'disable_existing_loggers': False, # - отключить ранее определенные логи (логи по умолчанию)
          'filters': {...},  # - дополнительные фильтры для логов
          'handlers': {   # - описание обработчиков 
          'mail_admins': {
            'level': 'ERROR', # - уровни событий, которые перехватывает обработчик. Варианты: DEBUG, INFO, WARNING, ERROR, CRITICAL
            'class': 'django.utils.log.AdminEmailHandler'   # - класс, реализующий функционал обработчика
            }, ...
           },
         'loggers': {
            'smarty_ads': {
            'handlers': ['smarty_ads_handler', 'console'], # - обработчик типа логов. Описывается выше в 'handlers' 
            'level': 'DEBUG',     # - уровни событий, которые перехватывает логгер. Варианты: DEBUG, INFO, WARNING, ERROR, CRITICAL
            'propagate': True,    # - передает ли логгер событие дальше для обработки другими логгерами. 
         }, ...
        }

SMARTY_ACCOUNTS_LOG_FILE ``str``
  Путь к файлу лога аккаунтов
  
SMARTY_BILLING_OUT_LOG_FILE ``str``
  Путь к файлу лога внешнего биллинга
  
SMARTY_BILLING_IN_LOG_FILE ``str``
  Путь к файлу лога встроенного биллинга
  
SMARTY_PAYMENT_LOG_FILE ``str``
  Путь к файлу лога платежей
  
SMARTY_PORTAL_LOG_FILE ``str``
  Путь к файлу лога портала

SMARTY_EPG_LOG_FILE ``str``
  Путь к файлу лога epg

SMARTY_ADMIN_LOG_FILE ``str``
  Путь к файлу лога действий в панели администрирования

SMARTY_CONTENT_REQUESTS_LOG_FILE ``str``
  Путь к файлу лога запросов контента

SMARTY_API_REQUESTS_LOG_FILE ``str``
  Путь к файлу лога api

SMARTY_MESSAGING_LOG_FILE ``str``
  Путь к файлу лога сообщений

SMARTY_MANAGEMENT_LOG_FILE ``str``
  Путь к файлу лога management-команд

SMARTY_CACHE_LOG_FILE ``str``
  Путь к файлу лога кэша

SMARTY_MAIN_LOG_FILE ``str``
  Путь к файлу общего лога

SMARTY_STREAM_SERVICES_LOG_FILE ``str``
  Путь к файлу лога потоковых сервисов

SMARTY_VIDEOSERVICES_LOG_FILE ``str``
  Путь к файлу лога видеосервисов

SMARTY_SMS_LOG_FILE ``str``
  Путь к файлу лога смс

SMARTY_RQ_LOG_FILE ``str``
  Путь к файлу лога очереди работ редиса

SMARTY_MEGOGO_LOG_FILE ``str``
  Путь к файлу лога запросов к api megogo

SMARTY_TVZAVR_LOG_FILE ``str``
  Путь к файлу лога запросов к api tvzavr

SMARTY_IRDETO_LOG_FILE ``str``
  Путь к файлу лога запросов к api irdeto

SMARTY_CUSTOM_LOG_FILE ``str``
  Путь к файлу лога аккаунтов

SMARTY_DEVMONITOR_LOG_FILE ``str``
  Путь к файлу лога мониторинга устройств

SMARTY_HBB_LOG_FILE ``str``
  Путь к файлу лога hbb

SMARTY_ADS_LOG_FILE ``str``
  Путь к файлу лога рекламных блоков

SMARTY_DEFAULT_ICON_SIZE ``(int, int)``
  Стандартный размер иконки.

SMARTY_DEFAULT_ICON_SIZES ``list``
  Список дополнительных размеров для иконок. Каждое значение должно быть кортежем из двух целочисленных значений.
  Максимум 3 дополнительных размера.

ADS_ADSTREAM_DEVMODE ``bool``
  Опция позволяет включить отдачу тестовых рекламных роликов от провайдера рекламы DirectAd.
  
MAX_LA ``float``
  Максимальное значение средней загрузки сервера, на основе которой рассчитывается нагрузка на сервер (положительное число больше 0).

MAX_USED_MEM ``float``
  Максимально значение использованной памяти, на основе которой рассчитывается нагрузка на сервер (задается в процентах).
  
RESERVED_SERVER_ADDRESSES ``list``
  Cписок резервных адресов Smarty, на которые произойдет переключение, если параметры нагрузки процессора, БД и кэша превысят максимально допустимые. По умолчанию пустой.
  
BILLING_CLIENTS_EXCLUDE ``list``
  Отключает работу check_accounts и make_autopayments для определённых client_id.

.. _license-settings:

2.4.3. Добавление лицензионного ключа сервера Smarty
----------------------------------------------------

Каждый инстанс Smarty привязывается к аппаратной и программной конфигурации сервера лицензионным ключом, который
может быть ограничен по времени действия и максимальному числу настроенных Client ID (см. :ref:`Мультипровайдер <client-creation>`).

Лицензионный ключ настраивается в файле конфигурации в следующих переменных: ::

    SMARTY_KEY = 'XXXXXXX-XXXXXXX-XXXXXXX-XXXXXXX'
    SMARTY_MAX_CLIENTS = 2
    SMARTY_AVAILABLE_UNTIL = 'dd.mm.yyyy'

Для получения ключа необходимо обратиться к своему менеджеру по договору.

.. _cache-settings:

2.4.4. Настройка кеширования
----------------------------

Для кеширования используется сервер **Redis** - является обязательным компонентом системы. Требуется версия Redis >= 2.6.

По умолчанию конфигурация подразумевает локальную установку сервера Redis на тот же сервер Smarty,
однако при необходимости их можно разделить.
Для изменения параметров подключения к Redis необходимо в конфигурации Smarty прописать массив **CACHES** следующим образом: ::

    CACHES = {
        "default": {
            "BACKEND": "core.cache.backends.RedisCache",
            "LOCATION": "redis://127.0.0.1:6379/1",
            "OPTIONS": {
            }
        }
    }

В файле конфигурации Redis ``/etc/redis/redis.conf`` необходимо прописать: ::

    stop-writes-on-bgsave-error no

Для вступления изменений в силу требуется перезагрузить Redis и uwsgi.

Также поддерживается работа в кластерном режиме с группой серверов Redis, пример настройки: ::

    CACHES = {
        "default": {
            "BACKEND": "core.cache.backends.RedisCache",
            "LOCATION": "redis://192.168.33.11:7000/0", # не используется, но необходимо
            "OPTIONS": {
                "REDIS_CLIENT_CLASS": "rediscluster.client.StrictRedisCluster",
                "CONNECTION_POOL_CLASS": "core.cache.cluster_connection.ClusterConnectionPool",
                "CONNECTION_POOL_KWARGS": {
                    "startup_nodes": [
                        # masters
                        {"host": "192.168.33.11", "port": "7000"},
                        {"host": "192.168.33.12", "port": "7000"},
                        {"host": "192.168.33.13", "port": "7000"},
                    ]
                }
            }
        }
    }

.. _geo-settings:

2.4.5. Настройка модуля геолокации
----------------------------------

Поддерживается несколько локаторов на основе IP-адреса абонента, работающие с разными источниками гео-данных.
В :ref:`служебной панели администрирования <service_configuration>` для настраиваемого Client ID необходимо установить
используемый локатор, наиболее подходящий для оператора и его региона оказания услуг.

*Если до изменения локатора база данных стран и городов уже была заполнена, то рекомендуется очистить её.*

Все локаторы требуют создания/обновления своей базы данных. База данных может быть в виде SQL-таблиц или бинарных данных (либо и то, и то).

.. _django-geoip:

2.4.5.1. Локатор django-geoip (ipgeobase)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Представляет собой обёртку над https://django-geoip.readthedocs.org/en/latest/

Команда для обновления базы: ::

    $ smarty_manage geoip_update --settings=settings.<settings name>

Создание стран и городов на основе данных django-geoip (работает только если в системе нет ни одной страны и города): ::

    $ smarty_manage sync_geo_geoip --settings=settings.<settings name>

.. _ip2location:

2.4.5.2. Локатор ip2location
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Обновление базы: ::

    $ smarty_manage update_ip2location --settings=settings.<settings name>

Эта команда скачивает бинарную базу данных для определения местоположения и CSV-базу для создания справочника городов и стран.

Создание стран и городов на основе данных ip2location (работает только если в системе нет ни одной страны и города): ::

    $ smarty_manage sync_geo_ip2location --settings=settings.<settings name>


После выбора локатора и синхронизации данных механизм геолокации готов к использованию. Доступность тех или иных
сервисов Middleware (телеканалы, фильмы, стриминг-сервисы, опции и т.д.) определяется тарифными пакетами
(см. :ref:`Возможности тарификации <billing-tariffs-features>`), в настройках которых можно указать те страны и города,
в которых они действуют.

.. _monitoring-settings:

2.4.6. Настройка модуля мониторинга видеопотоков
------------------------------------------------

Настройки задаются переменными в файле конфигурации Smarty.

MONITORING_CONCURRENT_STREAMS_COUNT ``int``
  Количество одновременно опрашиваемых потоков с анализаторов MicroTS.
  Данный параметр влияет на производительность и быстроту обновления данных на странице мониторинга потоков.

MONITORING_AGENT_SOCKET_TCP_BUFFER ``int``
  Размер буфера данных при приеме ответа от анализатора MicroTS. Значение по умолчанию 4096 байт.

MONITORING_STREAM_CHECKS_TTL_DAYS ``int``
  Период жизни проб и событий потока.

MONITORING_STREAM_TEST_DURATION ``int``
  Длительность ожидания отдельного потока с анализаторов MicroTS.
  Данный параметр влияет на производительность и быстроту обновления данных на странице мониторинга потоков.
  Значение по умолчанию 10

Скрипт опроса анализаторов запускается через crontab - см. :ref:`Настройка планировщика задач crontab <crontab-settings>`.

.. _reports-settings:

2.4.7. Настройка модуля статистики и отчетов
--------------------------------------------

Для сохранения данных телесмотрения абонентов используется сервер **MongoDB**.

.. note::

    Минимальная версия MongoDB необходимая для работы - 3.4

Настройки задаются переменными в файле конфигурации Smarty.


MONGODB_HOST ``str``
  Адрес сервера MongoDB.

MONGODB_PORT ``int``
  Порт сервера MongoDB.

MONGODB_NAME ``str``
  Название базы данных.

MONGODB_USERNAME ``str``
  Имя пользователя для авторизации.

MONGODB_PASSWORD ``str``
  Пароль для авторизации.

MONGODB_AUTH_METHOD ``str``
  Метод авторизации. Метод авторизации зависит от версии **MongoDB**.

В секции **INSTALLED_APPS** в файле конфигурации Smarty необходимо добавить модуль ``viewstats``.

.. _smartystats-settings:

2.4.8. Настройка модуля сбора статистики по абонентам
-----------------------------------------------------

Для отображения информации внутри вкладки "Динамика абонентов" в секции **INSTALLED_APPS** в файле конфигурации Smarty необходимо добавить модуль ``smartystats`` и ``viewstats``.

.. note::
    
    После добавления модулей необходимо установить все недостающие миграции.

Помимо этого необходимо настроить корректную работу management-команд cache_max_online и save_stats.


.. _devicemonitoring-settings:

2.4.9. Настройка модуля мониторинга устройств
---------------------------------------------

Для сохранения данных метрик и системной информации устройств абонентов используется сервер **MongoDB**.

.. note::

    Минимальная версия MongoDB необходимая для работы - 3.4

Настройки задаются переменными в файле конфигурации Smarty.


DEVMON_SINGLE_CLIENT ``bool``
  Включить режим единого доступа мониторинга устройств. Обеспечивает одинаковый доступ как к функционалу, так и ко всей базе мониторинга устройств для всех клиентов.

.. note::

  В режиме единого доступа разные клиенты могут иметь доступ к устройствам, которые этим клиентам не принадлежат.

MONGODB_MONITORING_HOST ``str``
  Адрес сервера MongoDB.

MONGODB_MONITORING_PORT ``int``
  Порт сервера MongoDB.

MONGODB_MONITORING_NAME ``str``
  Название базы данных.

MONGODB_MONITORING_USERNAME ``str``
  Имя пользователя для авторизации.

MONGODB_MONITORING_PASSWORD ``str``
  Пароль для авторизации.

MONGODB_MONITORING_AUTH_METHOD ``str``
  Метод авторизации. Метод авторизации зависит от версии **MongoDB**.

В секции **INSTALLED_APPS** в файле конфигурации Smarty необходимо добавить модуль ``device_monitoring``.

.. _sms-settings:

2.4.10. Настройка модуля отправки SMS
------------------------------------

SMS отправляются системой при использовании виджетов, интегрированных с сайтом, например, во время регистрации абонента.
Настройки задаются переменными в файле конфигурации Smarty.

SMS_BACKED ``str``
  Используемый СМС-шлюз для отправки сообщений.
  Модуль, реализующий взаимодействие со шлюзом, должен располагаться в директории Smarty в папке ``sms/backends/``.

SMS_ATTEMPTS ``int``
  Количество максимальных попыток отправки сообщения, после которого оно считается отправленным неуспешно.

.. _smsc.ru:

2.4.10.1. Шлюз smsc.ru
~~~~~~~~~~~~~~~~~~~~~

Значение для **SMS_BACKEND** = ``'sms.backends.smscru.SMSCBackend'``

SMSC_LOGIN ``str``
  Имя пользователя в сервисе smsc.ru

SMSC_PASSWORD ``str``
  Пароль в сервисе smsc.ru

SMSC_SENDER ``str``
  Имя отправителя, которое будет отображаться в SMS, отправленных через сервис smsc.ru

.. _mobipace:

2.4.10.2. Шлюз mobipace.com
~~~~~~~~~~~~~~~~~~~~~~~~~~

Значение для **SMS_BACKEND** = ``'sms.backends.mobipace.MobipaceBackend'``

MOBIPACE_LOGIN ``str``
  Имя пользователя в сервисе mobipace.

MOBIPACE_PASSWORD ``str``
  Пароль в сервисе mobipace.

MOBIPACE_SENDER ``str``
  Имя отправителя для СМС-сообщений.

.. _sentry-settings:

2.4.11. Подключение системы мониторинга ошибок Sentry
----------------------------------------------------

Для подключения ``Sentry`` необходимо в файле конфигурации Smarty добавить в **INSTALLED_APPS** модуль ``raven.contrib.django.raven_compat``
и прописать параметры подключения: ::

    RAVEN_CONFIG = {
        'dsn': 'http://<LOGIN>:<PASS>@<SENTRY HOST>/<PROJECT>',
    }

Строку подключения можно получить из настроек проекта в Sentry.

.. _nginx-config:

2.4.12. Настройка nginx и uwsgi
-------------------------------

Образец файла конфигурации для **nginx** находится в файле ``/etc/nginx/sites-available/smarty``.

Конфигурация для **uwsgi** находится в файлах ``/etc/uwsgi/apps-available/smarty`` и ``/etc/microimpuls/smarty/uwsgi/smarty.uwsgi``,
на него (или на другой используемый конфиг) должен указывать симлинк в ``/usr/share/nginx/html/microimpuls/smarty/<uwsgi settings name>.uwsgi``.

2.4.13. Настройка мультиязычности контента в Smarty
---------------------------------------------------

Smarty позволяет сохранять в базе данных контент с названиями локализуемых полей на разных языках - например, названия
телеканалов, фильмов, категорий, жанров, EPG и др.
Чтобы активировать этот механизм, необходимо добавить в файл конфигурации параметр **SMARTY_ADDITIONAL_LANGUAGES**
с перечнем необходимых языков (не более 5 дополнительных к основному языков), а также указать основной язык.
Названия языков должны совпадать с названием локализации в абонентском приложении, по умолчанию используются
двухбуквенные названия.

SMARTY_DEFAULT_LANGUAGE ``str``
  Название основного языка.
  По умолчанию ``ru``.

SMARTY_ADDITIONAL_LANGUAGES ``list``
  Список дополнительных языков, задается в квадратных скобках с указанием значений через запятую, например:
  ``[ 'en', 'fr', 'de', 'es', 'pt' ]``
  По умолчанию пустой.

После настройки параметров мультиязычности и перезагрузки **uwsgi** в панели администратора Smarty в полях формы
локализуемых полей появится возможность указать название на дополнительных языках.

Для того, чтобы сервер Smarty в ответе на запрос API вернул значение на нужном языке, необходимо дополнительно передавать
параметр ``lang``. Подробнее в документации `TVMiddleware API <https://microimpuls.github.io/smarty-tvmw-api-docs>`_.


.. _crontab-settings:

2.5. Системные команды Smarty и настройка crontab
=================================================

.. note::

    Внимание! Некоторые команды планировщика являются обязательными для функционирования сервиса.

.. _cache-channel-list-command:

2.5.1. Кеширование списка телеканалов для абонентских устройств
---------------------------------------------------------------

Команда: ::

    smarty_manage cache_channel_list --settings=settings.<settings name>

Рекомендуется запускать эту команду каждую минуту. При пустом кеше списка телеканалов абоненту будет выдаваться сообщение,
что список телеканалов пуст.

.. _epgchannel-import-command:

2.5.2. Импорт EpgChannel
------------------------

Команда: ::

    smarty_manage epg_channel_import --settings=settings.<settings name>

Данная команда поможет загрузить все каналы или обновить иконки из определенного источника. Для запуска обязательно
необходимо указать ``epg_source_id`` или ``--epg_source_name``.

Если команда вызывается для загрузки иконок или загрузки всех каналов из EpgChannelSource, то к загруженным иконкам
по возможности будут созданы более маленькие копии следующих размеров: ``500x500``, ``120x91`` и ``40x40``.

Для источника обязательно должен существовать EpgChannelSource с указанием маски URL источника каналов. Для источников,
у которых нет общего списка необходимо указывать  ``epg_channel_id`` или ``channel_id``.


Аргументы для запуска:

--epg_source_id
    Идентификатор EpgSource, для которого необходимо произвести импортирование каналов.

--epg_source_name
    Имя EpgSource, для которого необходимо произвести импортирование каналов.

--epg_channel_id
    Идентификатор EpgChannel, для которого необходимо произвести импортирование.

--channel_id
    Идентификатор Channel, для которого необходимо произвести импортирование.

--reimport_icons
    Если указан этот аргумент, то для всех импортированных каналов будет произведено обновление иконок.

--force_import
    Загрузка всех каналов из источника. Если указан данный аргумент то все аргументы кроме ``epg_source_id`` и
    ``epg_source_name`` будут проигнорированы.

Пример команды для повторного импортирования иконок для одного канала:

    smarty_manage epg_channel_import --epg_source_id=1 --epg_channel_id=100 --reimport_icons --settings=settings.<settings name>

.. _epg-import-command:

2.5.3. Импорт EPG
-----------------

Команда: ::

    smarty_manage epg_import --settings=settings.<settings name>

Рекомендуется запускать импорт несколько раз в день для поддержания актуальности телепрограммы
(см. :ref:`Настройка EPG и телеканалов <epg-setup>`).
Если не произвести импорт EPG, то программа телепередач на устройстве абонента будет пустой.

Для того чтобы произвести импорт EPG для одного определенного источника необходимо передать параметр ``--epg_source_id``
или ``--epg_source_name``.

В данную команду можно также передать параметр ``--epg_channel_id`` для импорта EPG только для определенного EpgChannel.

Также с помощью параметра ``--actual_days`` можно указать количество дней, когда загруженные EPG считаются актуальными, то есть все EPG, старше чем указанное количество дней, будут удалены.

Также эта команда позволяет генерировать на основе загруженного EPG контент и подборки, для этого необходимо передать параметр ``--create_content``.
Если необходимо только сгенерировать контент и подборки, то помимо предыдущего параметра нужно передать параметр ``--ignore_epg_import``.
Для данной опции работает фильтрация по EpgChannel и по источнику, однако генерироваться контент будет __для всех встречаемых EPG__, а не только загруженных.

.. _premieres-import-command:

2.5.4. Импорт EPG-премьер
-------------------------

Команда: ::

    smarty_manage epg_premiere_import --settings=settings.<settings name>

Рекомендуется запускать 1-2 раза в день для поддержки актуальности списка премьер
(см. :ref:`Настройка EPG и телеканалов <epg-setup>`).
Если не произвести импорт, то список премьер на устройстве абонента будет пустой.

В данную команду можно также передать параметр ``--epg_channel_id`` для импорта премьер только для определенного EpgChannel.

.. _check-accounts-command:

2.5.5. Команда списания/продления аккаунтов с помощью встроенного биллинга согласно рассчетным периодам
-------------------------------------------------------------------------------------------------------

Команда: ::

    smarty_manage check_accounts --settings=settings.<settings name>

Команда осуществляет деактивацию аккаунтов, для которых подошел к концу расчетный период, а также производит списание средств
и продление действующих аккаунтов. Рекомендуется запускать каждую ночь (см. :ref:`Описание встроенного биллинга <builtin-billing>`).

.. _check-streams-command:

2.5.6. Опрос анализаторов TS-потоков MicroTS (модуль мониторинга видеопотоков)
------------------------------------------------------------------------------

Команда: ::

    smarty_manage check_streams --settings=settings.<settings name>

Рекомендуется запускать каждые 1-5 минут для актуального состояния данных.

.. _send-activation-expires-messages-command:

2.5.7. Рассылка информационных сообщений на экраны устройств и email о приближении срока деактивации/необходимости оплаты
-------------------------------------------------------------------------------------------------------------------------

Команда: ::

    smarty_manage send_activation_expires_messages --days_count <количество оставшихся дней> --settings=settings.<settings name>

Рекомендуется запускать каждый вечер.

.. _clean-old-messages-command:

2.5.8. Очистка старых недоставленных информационных сообщений
-------------------------------------------------------------

Команда: ::

    smarty_manage clean_old_messages --days_count 3 --settings=settings.<settings name>

.. _resend-sms-command:

2.5.9. Повторная отправка SMS-сообщений, недоставленных с первого раза
----------------------------------------------------------------------

Команда: ::

    smarty_manage resend_sms --settings=settings.<settings name>

Рекомендуется запускать каждые 1-3 минуты.

.. _delete-authkeys:

2.5.10. Команда удаления всех сессий авторизации всех аккаунтов для заданного Client ID
--------------------------------------------------------------------------------------

Команда: ::

    smarty_manage delete_authkeys --client_id=<client_id> --settings=settings.<settings name>

Внимание, выполнение команды приведет к логауту всех устройств.

.. _check_stream_services:

2.5.11. Команда проверки доступности стриминг-сервисов для механизма отказоустойчивости
---------------------------------------------------------------------------------------

Команда: ::

    python manage.py check_stream_services --settings=settings.<settings name>

При настройке отказоустойчивой схемы сервиса с балансировкой нагрузки рекомендуется выполнять эту команду каждую минуту.

Команда проверяет сервисы по тем методам проверки, которые настроены в свойствах стриминг-сервиса.
.. _make_autopayments:

2.5.12. Команда совершения автоплатежей
--------------------------------------------------------------------------------------

Команда: ::

    smarty_manage make_autopayments --settings=settings.<settings name>

Производит оплату для тех клиентов, у которых активен автоплатёж, будет списание средств при проверке аккаунтов сегодня и количество средств недостаточно для проделения всех аккаунтов клиента. Рекомендуется выполнять непосредственно перед вызовом check_accounts.

При указании параметра --use_pool обработка клиентов будет производиться в многопоточном режиме.

.. _migrate_to_nb:
2.5.13. Команда миграции клиента на подписочную модель
--------------------------------------------------------------------------------------

Команда: ::

    smarty_manage migrate_to_nb --client_id=<client_id> --settings=settings.<settings name>

Мигрирует клиента на подписочную модель тарифов. Создаёт для каждого пользователя и аккаунта подписки на каждый подключенный тариф.

**Изменения, сделанные данной командой являются необратимыми, рекомендуется сделать резервную копию БД перед применением. Ни в коем случае не использовать без необхомости.**

.. _recache_icons:

2.5.14. Команда кэширования существующих иконок
---------------------------------------------------------------------------------------

Команда: ::

    smarty_manage recache_icons --settings=settings.<settings name>

Вызывается в случае отсутствия информации о существующих иконках.

Команда проверяет и сохраняет в кэше существование иконок для всех EpgChannel по размерам, указанным в
``SMARTY_DEFAULT_ICON_SIZE`` и ``SMARTY_DEFAULT_ICON_SIZES``.
.. _delete_old_reports:

.. _delete_old_reports:

2.5.15. Очистка старых отчетов
-------------------------

Команда: ::

    python /usr/share/nginx/html/microimpuls/smarty/manage.py delete_old_reports --save-days=30 --settings=settings.<settings name>

В данную команду необходимо передать параметр ``--save-days`` для указания количества дней, за которое отчеты нужно сохранить.

.. _clear_customer_log:

2.5.16. Очистка лога действий абонента
--------------------------------------

Команда: ::

    python /usr/share/nginx/html/microimpuls/smarty/manage.py clear_customer_log --days=60 --settings=settings.<settings name>

Параметр ``--days`` обязателен и определяет, что при вызове команды будут удалены записи старше ``days`` дней.

.. _cache_max_online:

2.5.17. Сохранение максимального числа абонентов онлайн для статистики

Команда: ::

    smarty_manage cache_max_online --settings=settings.<settings name>
    
Можно запускать с любой регулярностью, но не реже раз в сутки.
    
.. _save_stats:

2.5.18. Сбор и хранение статистики по каждому клиенту

Команда: ::

    smarty_manage save_stats --settings=settings.<settings name>
 
 Необходимо запускать раз в сутки.

.. _crontab-example:

2.5.19. Пример настройки crontab
--------------------------------

Пример: ::

    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    */1 * * * *         python /usr/share/nginx/html/microimpuls/smarty/manage.py cache_channel_list --settings=settings.prod
    0 5,9,13 * * *      python /usr/share/nginx/html/microimpuls/smarty/manage.py epg_import --settings=settings.prod
    0 3 * * *           python /usr/share/nginx/html/microimpuls/smarty/manage.py clean_old_messages --days_count 3 --settings=settings.prod

.. make_vodpvr:

2.5.20. Команда генерации видео для архивных записей
----------------------------------------------------

Команда: ::

    smarty_manage make_vodpvr --client_id=<client_id> --settings=settings.<settings name>

Выполняет создание видео для каждой программы, если для нее существует канал ведущий архивную запись. Отличается от контента

2.6. Запуск, перезапуск и остановка Smarty
==========================================

Для управления процессами сервера приложений uwsgi используется init-скрипт ``/etc/init.d/uwsgi``: ::

    $ /etc/init.d/uwsgi
    Usage: /etc/init.d/uwsgi {start|stop|status|restart|reload|force-reload}

Все команды действуют на все запущенные инстансы uwsgi.

Логи по умолчанию сохраняются в ``/var/log/uwsgi/``, ``/var/log/nginx/`` и ``/var/log/microimpuls/``.

.. _install-updates:

2.7. Установка обновлений Smarty
================================

.. note::

    Перед установкой пакетов обновления, пожалуйста, сделайте резервную копию конфигурации, файлов Smarty, а также дамп базы данных.

Обновления устанавливаются командой ``dpkg``: ::

    dpkg -i smarty*.deb

После установки обновления необходимо установить новые требуемые python-библиотеки через ``pip``: ::

    sudo pip install -r /usr/share/nginx/html/microimpuls/smarty/requirements.txt --ignore-installed

Миграция схемы БД осуществляется командой: ::

    python /usr/share/nginx/html/microimpuls/smarty/manage.py migrate --settings=settings.<settings filename>

После установки всех обновлений и миграции схем БД необходимо перезапустить сервер приложений uwsgi, завершить все команды
*epg_import* и *cache_channel_list* (через вызов *kill*), а затем выполнить команду обновления кеша: ::

    python /usr/share/nginx/html/microimpuls/smarty/manage.py flushall --settings=settings.<settings filename>


.. note::

    Если не выполнить команду обновления кеша *flushall*, то в кеше могут оказаться данные со старой структурой,
    что может привести к непредсказуемым ошибкам в работе приложений.

2.7.1. Устранение ошибки конфликта миграций
-------------------------------------------

В процессе миграции схемы БД может возникнуть ошибка конфликта миграций:
``To fix them run 'python manage.py makemigrations --merge'``. Не нужно делать команду ``makemigrations``.
Ошибка может возникнуть в случае нарушения правильного порядка действий при установке или обновлении системы.
Чтобы устранить эту ошибку, необходимо выполнить следующие действия:

* Удалить содержимое папки /tvmiddleware/migrations

* Переустановить пакет обновления smarty, который был установлен в тот момент, когда возникла данная ошибка.
  Временно удалить из папки /tvmiddleware/migrations все новые миграции (дата создания у которых новее чем дата последнего успешного обновления smarty).

* Очистить таблицу ``django_migrations`` в базе данных smarty.

* Выполнить команду: ::

    $ python manage.py migrate --fake --settings=settings.<settings filename>

* Скопировать обратно миграции, временно удаленные на шаге 2. Повторно выполнить команду миграции: ::

    $ python manage.py migrate --settings=settings.<settings filename>

.. _scalability-failsafe:

2.8. Масштабирование и отказоустойчивость
=========================================

.. _known-scalability-failsafe-tools:

2.8.1. Доступные средства масштабирования и отказоустойчивости
--------------------------------------------------------------

Подробная информация о кластерных конфигурациях Smarty в новой базе знаний по продукту на сайте https://microimpuls.com/docs/smarty/scaling-and-redundancy.

.. _database-replication-settings:

2.8.2. Настройка подключения к СУБД с использованием репликации
---------------------------------------------------------------

Актуальная документация по настройке подключения к SQL-кластеру: https://microimpuls.com/docs/smarty/scaling-and-redundancy/smarty-sql-cluster-connection

.. _statsd:

2.8.3. Настройка логирования статистики запросов в statsd
---------------------------------------------------------

statsd - сервер аггрегации статистических данных: https://github.com/etsy/statsd.

Smarty позволяет выгружать в statsd статистику по запросам к API (количество запросов, время ответа, количество
выполненных SQL-запросов, время ответа СУБД). Для этого необходимо добавить в файл конфигурации Smarty параметры,
указанные ниже: ::

    MIDDLEWARE_CLASSES += (
        'core.middleware.StatsMiddleware',
    )

    STATSD_HOST = 'X.X.X.X'
    STATSD_PORT = '8125'

Где:

STATSD_HOST ``str``
  IP-адрес сервера statsd для выгрузки данных статистики и мониторинга работы сервера Smarty.

STATSD_PORT ``int``
  Порт сервера statsd для выгрузки данных статистики и мониторинга работы сервера Smarty.

STATSD_PREFIX ``str``
  Префикс, который будет добавляться (если задан) к ключам параметров, передаваемых в statsd.

.. note::

    Внимание! Необходимо обеспечить доступность сервера statsd и правильность настроек подключения,
    в противном случае подключенная ```core.middleware.StatsMiddleware``` и отсутствие соединения
    со statsd может приводить к чрезмерному потреблению оперативной памяти.
